First we define the syntax of first order logic:

syntax
    100 | value '∈' value
    100 | value '=' value
    300 | sentence '→' sentence
    200 | '∃' binding ',' sentence
    100 | '⊥'
end

notation paren
    100 | '(' p:sentence ')' => $p 
end

notation not
    600 | '¬' p:sentence => $p → ⊥
end

notation or
    400 | p:sentence '∨' q:sentence => ¬$p → $q
end

notation and
    500 | p:sentence '∧' q:sentence => ¬(¬$p ∨ ¬$q)
end

notation iff
    300 | p:sentence '↔' q:sentence => ($p → $q) ∧ ($q → $p)
end

notation forall
    200 | '∀' v:binding ',' p:sentence => ¬ ∃ $v, $p
end

notation exists_at_most_one
    200 | '∃' '*' v:binding ',' p:sentence => ∃y, ∀ $v, $p → $v = y
end

notation exists_uniq
    200 | '∃' '!' v:binding ',' p:sentence => (∃ $v, $p) ∧ (∃* $v, $p)
end

definition paren_value
    200 | '(' x:value ')' => $x
end

axiom subst [x] [y] [schema 'p(_)] : (x = y) ('p(x))
    |- 'p(y)
end

axiom ident [x] :
    |- x = x
end

theorem eq_comm [x] [y] : (x = y)
    |- y = x
proof
    have x = x by ident
    have y = x by subst [x] [y] [_ = x]
end

theorem eq_trans [x] [y] [z] : (x = y) (y = z)
    |- x = z
proof
    have y = x by eq_comm
    have x = z by subst [y] [x] [_ = z]
qed

axiom mp [schema 'p 'q] : ('p → 'q) ('p)
    |- 'q
end

axiom imp_intro [schema 'p 'q] : (assume 'p |- 'q)
    |- 'p → 'q
end

axiom ex_falso [schema 'p] : (⊥)
    |- 'p
end

axiom exists_intro [x] [schema 'p(_)] : ('p(x))
    |- ∃y, 'p(y)
end

axiom exists_elim [fresh y] [schema 'p(_)] : (∃x, 'p(x))
    |- 'p(y)
end

axiom zfc_pairing : 
    |- ∀x, ∀y, ∃z, ((x ∈ z) ∧ (y ∈ z))
end

axiom zfc_specification [s] [schema 'p(_)] :
    |- ∃r, ∀x, x ∈ r ↔ (x ∈ s ∧ 'p(x))
end

definition 
    000 | '{' x:value ',' y:value '}'
where 
    |- ∀z, z ∈ _ ↔ (z = x ∨ z = y)
proof
    have ∀x', ∀y', ∃z, ((x' ∈ z) ∧ (y' ∈ z))               by zfc_pairing
    have ∀y', ∃z, ((x ∈ z) ∧ (y' ∈ z))                     by forall_elim
    have ∃z, ((x ∈ z) ∧ (y ∈ z))                           by forall_elim
    have ((x ∈ u) ∧ (y ∈ u))                               by exists_elim [u]

    have ∃r, ∀z, z ∈ r ↔ (z ∈ u ∧ (z = x ∨ z = y))         by zfc_specification
    have ∀z, z ∈ v ↔ (z ∈ u ∧ (z = x ∨ z = y))             by exists_elim [v]

    have x ∈ u                                             by and_elim_left
    have assume z = x |- z ∈ u                             by subst
    have z = x → z ∈ u                                     by imp_intro
    have y ∈ u                                             by and_elim_right
    have assume z = y |- z ∈ u                             by subst
    have z = y → z ∈ u                                     by imp_intro
    have assume (z = x ∨ z = y) |- z ∈ u                   by or_elim
    have (z = x ∨ z = y) → z ∈ u                           by imp_intro
    have assume (z = x ∨ z = y) |- z ∈ u ∧ (z = x ∨ z = y) by and_intro
    have (z = x ∨ z = y) → z ∈ u ∧ (z = x ∨ z = y)         by imp_intro
    have assume z ∈ u ∧ (z = x ∨ z = y) |- (z = x ∨ z = y) by and_elim_right
    have z ∈ u ∧ (z = x ∨ z = y) → (z = x ∨ z = y)         by imp_intro
    have z ∈ u ∧ (z = x ∨ z = y) ↔ (z = x ∨ z = y)         by and_intro
    
    have z' ∈ v ↔ (z' ∈ u ∧ (z' = x ∨ z' = y))             by forall_elim 
    have z' ∈ v ↔ (z = x ∨ z = y)                          by iff_trans
    have ∀z', z' ∈ v ↔ (z = x ∨ z = y)                     by forall_intro
end

axiom zfc_union [schema 'p] :
    |- ∀F, ∃A, ∀Y, ∀x ((x ∈ Y ∧ Y ∈ F) → x ∈ A)
end

definition 
    000 | set_union x:value y:value 
where
    |- ∀z, (z ∈ _) ↔ (z ∈ x ∨ z ∈ y)
proof
    todo
end

axiom zfc_empty_set : 
    |- ∃x, ∀y, ¬(y ∈ x)
end

definition empty_set
    000 | ∅
where 
    |- ∀x, ¬(x ∈ _)
proof
    have ∃x, ∀y, ¬(y ∈ x) by zfc_empty_set
    have ∀y, ¬(y ∈ e)     by exists_elim
end

theorem not_in_empty [x] :
    |- ¬(x ∈ ∅)
proof
    have ∀y, ¬(y ∈ ∅) by definition
    have ¬(x ∈ ∅)     by forall_elim
qed 

definition intersection 
    000 | x:value ∩ y:value 
where 
    |- ∀z, (z ∈ _) ↔ (z ∈ x ∧ z ∈ y)
proof
    todo
end

theorem forall_intro [schema 'p(_)] [fresh x] : ('p(x))
    |- ∀y, 'p(y)
proof
    todo
qed

theorem forall_elim [schema 'p(_)] [y] : (∀x, 'p(x))
    |- 'p(y)
proof
    todo
qed

theorem em [schema 'p] :
    |- 'p ∨ ¬'p
proof
    have ¬'p |- ¬'p by end
    have ¬'p → ¬'p  by end
qed

theorem or_intro_left [schema 'p 'q] : 'p
    |- ('p ∨ 'q)
proof
    have assume ¬'p |- 'q by
        have ⊥  by mp
        have 'q by ex_falso
    end
    have ¬'p → 'q by imp_intro
qed

theorem or_intro_right [schema 'p 'q] : ('q)
    |- ('p ∨ 'q)
proof
    have assume ¬'p |- 'q by end
    have ¬'p → 'q by imp_intro
qed

theorem double_neg [schema 'p 'q] : (¬¬'p)
    |- 'p
proof
    have p ∨ ¬'p by em

qed

theorem contrapos_f [schema 'p 'q] : ('p → 'q)
    |- ¬'q → ¬'p
proof
    have assume ¬'q |- ¬'p by
        have assume 'p |- ⊥ by
            have 'q by mp
            have  ⊥ by mp
        end
        have ¬'p by imp_intro
    end
    have ¬'q → ¬'p by imp_intro
qed

theorem contrapos_r [schema 'p 'q] : (¬'q → ¬'p) 
    |- 'p → 'q
proof
    have assume 'p |- 'q by
        have assume ¬'q |- ⊥ by
            have ¬'p by mp
            have   ⊥ by mp
        end
        have ¬¬'q by imp_intro
        have 'q   by double_neg
    end
    have 'p → 'q by imp_intro
qed

theorem or_elim [schema 'p 'q 'r] : ('p → 'r) ('q → 'r) ('p ∨ 'q)
    |- 'r
proof
    have assume 'p |- 'r by 
        have 'r by mp 
    end
    have assume ¬'p |- 'r by 
        have 'q by mp 
        have 'r by mp
    end

    todo
qed

theorem and_elim_left [schema 'p 'q] : ('p ∧ 'q) 
    |- 'p
proof

    todo
qed

theorem and_elim_right [schema 'p 'q] : ('p ∧ 'q)
    |- 'q
proof
    todo
qed

theorem and_intro [schema 'p 'q] : ('p) ('q)
    |- 'p ∧ 'q
proof
    have assume ¬'p ∨ ¬'q |- ⊥ by

    end
    have ¬(¬'p ∨ ¬'q) by imp_intro
qed


theorem and_comm [schema 'p 'q] : ('p ∧ 'q)
    |- 'q ∧ 'p
proof
    have 'p      by and_elim_left
    have 'q      by and_elim_right
    have 'q ∧ 'p by and_intro
qed

